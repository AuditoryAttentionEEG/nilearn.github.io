

.. _sphx_glr_auto_examples_decoding_plot_mixed_gambles_space_net.py:


SpaceNet on Jimura et al "mixed gambles" dataset.
==================================================

The segmenting power of SpaceNet is quite visible here.

See also the SpaceNet documentation: :ref:`space_net`.


.. code-block:: python

    # author: DOHMATOB Elvis Dopgima,
    #         GRAMFORT Alexandre





.. rst-class:: sphx-glr-horizontal





Load the data from the Jimura mixed-gamble experiment


.. code-block:: python

    from nilearn.datasets import fetch_mixed_gambles
    data = fetch_mixed_gambles(n_subjects=16)

    zmap_filenames = data.zmaps
    behavioral_target = data.gain
    mask_filename = data.mask_img





.. rst-class:: sphx-glr-horizontal





Fit TV-L1
Here we're using the regressor object given that the task is to predict a
continuous variable, the gain of the gamble.


.. code-block:: python

    from nilearn.decoding import SpaceNetRegressor
    decoder = SpaceNetRegressor(mask=mask_filename, penalty="tv-l1",
                                eps=1e-1,  # prefer large alphas
                                memory="nilearn_cache")

    decoder.fit(zmap_filenames, behavioral_target)

    # Visualize TV-L1 weights
    from nilearn.plotting import plot_stat_map, show
    plot_stat_map(decoder.coef_img_, title="tv-l1", display_mode="yz",
                  cut_coords=[20, -2])





.. image:: /auto_examples/decoding/images/sphx_glr_plot_mixed_gambles_space_net_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 **Output**:


  ::

    Time Elapsed: 488.236 seconds, 8 minutes.


Fit Graph-Net


.. code-block:: python

    decoder = SpaceNetRegressor(mask=mask_filename, penalty="graph-net",
                                eps=1e-1,  # prefer large alphas
                                memory="nilearn_cache")
    decoder.fit(zmap_filenames, behavioral_target)

    # Visualize Graph-Net weights
    plot_stat_map(decoder.coef_img_, title="graph-net", display_mode="yz",
                  cut_coords=[20, -2])

    show()



.. image:: /auto_examples/decoding/images/sphx_glr_plot_mixed_gambles_space_net_002.png
    :align: center


.. rst-class:: sphx-glr-script-out

 **Output**:


  ::

    Time Elapsed: 167.521 seconds, 2 minutes.


**Total running time of the script:**
(11 minutes 0.847 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_mixed_gambles_space_net.py <plot_mixed_gambles_space_net.py>`
