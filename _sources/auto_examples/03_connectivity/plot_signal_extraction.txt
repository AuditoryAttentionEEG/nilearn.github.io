

.. _sphx_glr_auto_examples_03_connectivity_plot_signal_extraction.py:


Extracting signals from a brain parcellation
============================================

Here we show how to extract signals from a brain parcellation and compute
a correlation matrix.

We also show the importance of defining good confounds signals: the
first correlation matrix is computed after regressing out simple
confounds signals: movement regressors, white matter and CSF signals, ...
The second one is without any confounds: all regions are connected to
each other.


One reference that discusses the importance of confounds is `Varoquaux and
Craddock, Learning and comparing functional connectomes across subjects,
NeuroImage 2013
<http://www.sciencedirect.com/science/article/pii/S1053811913003340>`_.

This is just a code example, see the :ref:`corresponding section in the
documentation <parcellation_time_series>` for more.

Retrieve the atlas and the data


.. code-block:: python

    from nilearn import datasets

    dataset = datasets.fetch_atlas_harvard_oxford('cort-maxprob-thr25-2mm')
    atlas_filename, labels = dataset.maps, dataset.labels

    print('Atlas ROIs are located in nifti image (4D) at: %s' %
          atlas_filename)  # 4D data

    # One subject of resting-state data
    data = datasets.fetch_adhd(n_subjects=1)
    fmri_filenames = data.func[0]





.. rst-class:: sphx-glr-script-out

 Out::

      Atlas ROIs are located in nifti image (4D) at: /home/parietal/gvaroqua/nilearn_data/fsl/data/atlases/HarvardOxford/HarvardOxford-cort-maxprob-thr25-2mm.nii.gz


Extract signals on a parcellation defined by labels using the
NiftiLabelsMasker


.. code-block:: python

    from nilearn.input_data import NiftiLabelsMasker
    masker = NiftiLabelsMasker(labels_img=atlas_filename, standardize=True,
                               memory='nilearn_cache', verbose=5)

    # Here we go from nifti files to the signal time series in a numpy
    # array. Note how we give confounds to be regressed out during signal
    # extraction
    time_series = masker.fit_transform(fmri_filenames, confounds=data.confounds)






.. rst-class:: sphx-glr-script-out

 Out::

      [NiftiLabelsMasker.fit_transform] loading data from /home/parietal/gvaroqua/nilearn_data/fsl/data/atlases/HarvardOxford/HarvardOxford-cort-maxprob-thr25-2mm.nii.gz
    Resampling labels
    ________________________________________________________________________________
    [Memory] Calling nilearn.input_data.base_masker.filter_and_extract...
    filter_and_extract('/home/parietal/gvaroqua/nilearn_data/adhd/data/0010042/0010042_rest_tshift_RPI_voreg_mni.nii.gz', 
    <nilearn.input_data.nifti_labels_masker._ExtractionFunctor object at 0x2afdbbb0b890>, 
    { 'background_label': 0,
      'detrend': False,
      'high_pass': None,
      'labels_img': '/home/parietal/gvaroqua/nilearn_data/fsl/data/atlases/HarvardOxford/HarvardOxford-cort-maxprob-thr25-2mm.nii.gz',
      'low_pass': None,
      'mask_img': None,
      'smoothing_fwhm': None,
      'standardize': True,
      't_r': None,
      'target_affine': None,
      'target_shape': None}, confounds=['/home/parietal/gvaroqua/nilearn_data/adhd/data/0010042/0010042_regressors.csv'], memory_level=1, verbose=5, memory=Memory(cachedir='nilearn_cache/joblib'))
    [NiftiLabelsMasker.transform_single_imgs] Loading data from /home/parietal/gvaroqua/nilearn_data/adhd/data/0010042/0010042_rest_tshift_RPI_voreg_mni.nii.gz
    [NiftiLabelsMasker.transform_single_imgs] Extracting region signals
    [NiftiLabelsMasker.transform_single_imgs] Cleaning extracted signals
    _______________________________________________filter_and_extract - 1.9s, 0.0min


Compute and display a correlation matrix


.. code-block:: python

    import numpy as np
    correlation_matrix = np.corrcoef(time_series.T)

    # Plot the correlation matrix
    from matplotlib import pyplot as plt
    plt.figure(figsize=(10, 10))
    # Mask the main diagonal for visualization:
    np.fill_diagonal(correlation_matrix, 0)

    plt.imshow(correlation_matrix, interpolation="nearest", cmap="RdBu_r",
               vmax=0.8, vmin=-0.8)

    # Add labels and adjust margins
    x_ticks = plt.xticks(range(len(labels) - 1), labels[1:], rotation=90)
    y_ticks = plt.yticks(range(len(labels) - 1), labels[1:])
    plt.gca().yaxis.tick_right()
    plt.subplots_adjust(left=.01, bottom=.3, top=.99, right=.62)





.. image:: /auto_examples/03_connectivity/images/sphx_glr_plot_signal_extraction_001.png
    :align: center




Same thing without confounds, to stress the importance of confounds


.. code-block:: python


    time_series = masker.fit_transform(fmri_filenames)
    # Note how we did not specify confounds above. This is bad!

    correlation_matrix = np.corrcoef(time_series.T)

    # Mask the main diagonal for visualization:
    np.fill_diagonal(correlation_matrix, 0)

    plt.figure(figsize=(10, 10))
    plt.imshow(correlation_matrix, interpolation="nearest", cmap="RdBu_r",
               vmax=0.8, vmin=-0.8)

    x_ticks = plt.xticks(range(len(labels) - 1), labels[1:], rotation=90)
    y_ticks = plt.yticks(range(len(labels) - 1), labels[1:])
    plt.gca().yaxis.tick_right()
    plt.subplots_adjust(left=.01, bottom=.3, top=.99, right=.62)
    plt.suptitle('No confounds', size=27)

    plt.show()



.. image:: /auto_examples/03_connectivity/images/sphx_glr_plot_signal_extraction_002.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

      [NiftiLabelsMasker.fit_transform] loading data from /home/parietal/gvaroqua/nilearn_data/fsl/data/atlases/HarvardOxford/HarvardOxford-cort-maxprob-thr25-2mm.nii.gz
    ________________________________________________________________________________
    [Memory] Calling nilearn.input_data.base_masker.filter_and_extract...
    filter_and_extract('/home/parietal/gvaroqua/nilearn_data/adhd/data/0010042/0010042_rest_tshift_RPI_voreg_mni.nii.gz', 
    <nilearn.input_data.nifti_labels_masker._ExtractionFunctor object at 0x2afdb5664e10>, 
    { 'background_label': 0,
      'detrend': False,
      'high_pass': None,
      'labels_img': '/home/parietal/gvaroqua/nilearn_data/fsl/data/atlases/HarvardOxford/HarvardOxford-cort-maxprob-thr25-2mm.nii.gz',
      'low_pass': None,
      'mask_img': None,
      'smoothing_fwhm': None,
      'standardize': True,
      't_r': None,
      'target_affine': None,
      'target_shape': None}, confounds=None, memory_level=1, verbose=5, memory=Memory(cachedir='nilearn_cache/joblib'))
    [NiftiLabelsMasker.transform_single_imgs] Loading data from /home/parietal/gvaroqua/nilearn_data/adhd/data/0010042/0010042_rest_tshift_RPI_voreg_mni.nii.gz
    [NiftiLabelsMasker.transform_single_imgs] Extracting region signals
    [NiftiLabelsMasker.transform_single_imgs] Cleaning extracted signals
    _______________________________________________filter_and_extract - 1.5s, 0.0min


**Total running time of the script:**
(0 minutes 3.839 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_signal_extraction.py <plot_signal_extraction.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_signal_extraction.ipynb <plot_signal_extraction.ipynb>`
