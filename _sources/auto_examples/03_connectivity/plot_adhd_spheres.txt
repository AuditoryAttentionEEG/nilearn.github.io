

.. _sphx_glr_auto_examples_03_connectivity_plot_adhd_spheres.py:


Extracting brain signal from spheres
====================================

This example extract brain signals from spheres described by the coordinates
of their center in MNI space and a given radius in millimeters. In particular,
this example extracts signals from Default Mode Network regions and compute a
connectome from them.


Retrieve the dataset


.. code-block:: python

    from nilearn import datasets
    adhd_dataset = datasets.fetch_adhd(n_subjects=1)

    # print basic information on the dataset
    print('First subject functional nifti image (4D) is at: %s' %
          adhd_dataset.func[0])  # 4D data






.. rst-class:: sphx-glr-script-out

 Out::

      First subject functional nifti image (4D) is at: /home/varoquau/nilearn_data/adhd/data/0010042/0010042_rest_tshift_RPI_voreg_mni.nii.gz


Coordinates of Default Mode Network


.. code-block:: python

    dmn_coords = [(0, -52, 18), (-46, -68, 32), (46, -68, 32), (0, 50, -5)]
    labels = [
        'Posterior Cingulate Cortex',
        'Left Temporoparietal junction',
        'Right Temporoparietal junction',
        'Medial prefrontal cortex'
    ]








Extracts signal from sphere around DMN seeds


.. code-block:: python

    from nilearn import input_data

    masker = input_data.NiftiSpheresMasker(
        dmn_coords, radius=8,
        detrend=True, standardize=True,
        low_pass=0.1, high_pass=0.01, t_r=2.5,
        memory='nilearn_cache', memory_level=1, verbose=2)

    func_filename = adhd_dataset.func[0]
    confound_filename = adhd_dataset.confounds[0]

    time_series = masker.fit_transform(func_filename,
                                       confounds=[confound_filename])





.. rst-class:: sphx-glr-script-out

 Out::

      ________________________________________________________________________________
    [Memory] Calling nilearn.input_data.base_masker.filter_and_extract...
    filter_and_extract('/home/varoquau/nilearn_data/adhd/data/0010042/0010042_rest_tshift_RPI_voreg_mni.nii.gz', 
    <nilearn.input_data.nifti_spheres_masker._ExtractionFunctor object at 0x7f139ef1f2d0>, 
    { 'allow_overlap': False,
      'detrend': True,
      'high_pass': 0.01,
      'low_pass': 0.1,
      'mask_img': None,
      'radius': 8,
      'seeds': [(0, -52, 18), (-46, -68, 32), (46, -68, 32), (0, 50, -5)],
      'smoothing_fwhm': None,
      'standardize': True,
      't_r': 2.5}, confounds=['/home/varoquau/nilearn_data/adhd/data/0010042/0010042_regressors.csv'], memory_level=1, verbose=2, memory=Memory(cachedir='nilearn_cache/joblib'))
    [NiftiSpheresMasker.transform_single_imgs] Loading data from /home/varoquau/nilearn_data/adhd/data/0010042/0010042_rest_tshift_RPI_voreg_mni.nii.gz
    [NiftiSpheresMasker.transform_single_imgs] Extracting region signals
    [NiftiSpheresMasker.transform_single_imgs] Cleaning extracted signals
    _______________________________________________filter_and_extract - 4.0s, 0.1min


Display time series


.. code-block:: python

    import matplotlib.pyplot as plt
    for time_serie, label in zip(time_series.T, labels):
        plt.plot(time_serie, label=label)

    plt.title('Default Mode Network Time Series')
    plt.xlabel('Scan number')
    plt.ylabel('Normalized signal')
    plt.legend()
    plt.tight_layout()





.. image:: /auto_examples/03_connectivity/images/sphx_glr_plot_adhd_spheres_001.png
    :align: center




Compute precision matrices


.. code-block:: python

    from sklearn.covariance import LedoitWolf
    cve = LedoitWolf()
    cve.fit(time_series)








Display connectome


.. code-block:: python

    from nilearn import plotting

    plotting.plot_connectome(cve.precision_, dmn_coords,
                             title="Default Mode Network Connectivity")
    plotting.show()



.. image:: /auto_examples/03_connectivity/images/sphx_glr_plot_adhd_spheres_002.png
    :align: center




**Total running time of the script:**
(0 minutes 4.608 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_adhd_spheres.py <plot_adhd_spheres.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_adhd_spheres.ipynb <plot_adhd_spheres.ipynb>`
