

.. _sphx_glr_auto_examples_03_connectivity_plot_connectivity_measures.py:


Comparing different functional connectivity measures
====================================================

This example compares different measures of functional connectivity between
regions of interest : correlation, partial correlation, as well as a measure
called tangent. The resulting connectivity coefficients are used to
classify ADHD vs control subjects and the tangent measure outperforms the
standard measures.



.. code-block:: python


    # Fetch dataset
    import nilearn.datasets
    atlas = nilearn.datasets.fetch_atlas_msdl()
    dataset = nilearn.datasets.fetch_adhd(n_subjects=30)








Extract regions time series signals


.. code-block:: python

    import nilearn.input_data
    masker = nilearn.input_data.NiftiMapsMasker(
        atlas.maps, resampling_target="maps", detrend=True,
        low_pass=None, high_pass=None, t_r=2.5, standardize=False,
        memory='nilearn_cache', memory_level=1)
    subjects = []
    sites = []
    adhds = []
    for func_file, phenotypic in zip(dataset.func, dataset.phenotypic):
        # keep only 3 sites, to save computation time
        if phenotypic['site'] in [b'"NYU"', b'"OHSU"', b'"NeuroImage"']:
            time_series = masker.fit_transform(func_file)
            subjects.append(time_series)
            sites.append(phenotypic['site'])
            adhds.append(phenotypic['adhd'])  # ADHD/control label








Estimate connectivity


.. code-block:: python

    import nilearn.connectome
    kinds = ['tangent', 'partial correlation', 'correlation']
    individual_connectivity_matrices = {}
    mean_connectivity_matrix = {}
    for kind in kinds:
        conn_measure = nilearn.connectome.ConnectivityMeasure(kind=kind)
        individual_connectivity_matrices[kind] = conn_measure.fit_transform(
            subjects)
        # Compute the mean connectivity
        if kind == 'tangent':
            mean_connectivity_matrix[kind] = conn_measure.mean_
        else:
            mean_connectivity_matrix[kind] = \
                individual_connectivity_matrices[kind].mean(axis=0)








Plot the mean connectome


.. code-block:: python

    import numpy as np
    import nilearn.plotting
    labels = np.recfromcsv(atlas.labels)
    region_coords = labels[['x', 'y', 'z']].tolist()
    for kind in kinds:
        nilearn.plotting.plot_connectome(mean_connectivity_matrix[kind],
                                         region_coords, edge_threshold='98%',
                                         title=kind)





.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/03_connectivity/images/sphx_glr_plot_connectivity_measures_001.png
            :scale: 47

    *

      .. image:: /auto_examples/03_connectivity/images/sphx_glr_plot_connectivity_measures_002.png
            :scale: 47

    *

      .. image:: /auto_examples/03_connectivity/images/sphx_glr_plot_connectivity_measures_003.png
            :scale: 47




Use the connectivity coefficients to classify ADHD vs controls


.. code-block:: python

    from sklearn.svm import LinearSVC
    from sklearn.cross_validation import StratifiedKFold, cross_val_score
    classes = ['{0}{1}'.format(site, adhd) for site, adhd in zip(sites, adhds)]
    print('Classification accuracy:')
    mean_scores = []
    cv = StratifiedKFold(classes, n_folds=3)
    for kind in kinds:
        svc = LinearSVC()
        # Transform the connectivity matrices to 1D arrays
        coonectivity_coefs = nilearn.connectome.sym_to_vec(
            individual_connectivity_matrices[kind])
        cv_scores = cross_val_score(svc, coonectivity_coefs,
                                    adhds, cv=cv, scoring='accuracy')
        print('%20s score: %1.2f +- %1.2f' % (kind, cv_scores.mean(),
                                              cv_scores.std()))
        mean_scores.append(cv_scores.mean())





.. code-block:: pytb

    Traceback (most recent call last):
      File "/volatile/home/aa013911/release/nilearn/doc/sphinxext/sphinx_gallery/gen_rst.py", line 467, in execute_script
        exec(code_block, example_globals)
      File "<string>", line 13, in <module>
      File "/home/aa013911/work/scikit-learn/sklearn/cross_validation.py", line 1148, in cross_val_score
        for train, test in cv)
      File "/home/aa013911/work/scikit-learn/sklearn/externals/joblib/parallel.py", line 517, in __call__
        self.dispatch(function, args, kwargs)
      File "/home/aa013911/work/scikit-learn/sklearn/externals/joblib/parallel.py", line 312, in dispatch
        job = ImmediateApply(func, args, kwargs)
      File "/home/aa013911/work/scikit-learn/sklearn/externals/joblib/parallel.py", line 136, in __init__
        self.results = func(*args, **kwargs)
      File "/home/aa013911/work/scikit-learn/sklearn/cross_validation.py", line 1054, in _cross_val_score
        y_train = y[train]
    TypeError: only integer arrays with one element can be converted to an index




Display the classification scores


.. code-block:: python

    import matplotlib.pyplot as plt
    plt.figure(figsize=(6, 4))
    positions = np.arange(len(kinds)) * .1 + .1
    plt.barh(positions, mean_scores, align='center', height=.05)
    yticks = [kind.replace(' ', '\n') for kind in kinds]
    plt.yticks(positions, yticks)
    plt.xlabel('Classification accuracy')
    plt.grid(True)
    plt.tight_layout()
    plt.show()



.. code-block:: pytb

    Traceback (most recent call last):
      File "/volatile/home/aa013911/release/nilearn/doc/sphinxext/sphinx_gallery/gen_rst.py", line 467, in execute_script
        exec(code_block, example_globals)
      File "<string>", line 4, in <module>
      File "/usr/local/lib/python2.7/dist-packages/matplotlib/pyplot.py", line 2591, in barh
        ret = ax.barh(bottom, width, height=height, left=left, **kwargs)
      File "/usr/local/lib/python2.7/dist-packages/matplotlib/axes/_axes.py", line 2185, in barh
        bottom=bottom, orientation='horizontal', **kwargs)
      File "/usr/local/lib/python2.7/dist-packages/matplotlib/axes/_axes.py", line 1994, in bar
        nbars)
    AssertionError: incompatible sizes: argument 'width' must be length 3 or scalar




**Total running time of the script:**
(2 minutes 50.734 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_connectivity_measures.py <plot_connectivity_measures.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_connectivity_measures.ipynb <plot_connectivity_measures.ipynb>`
