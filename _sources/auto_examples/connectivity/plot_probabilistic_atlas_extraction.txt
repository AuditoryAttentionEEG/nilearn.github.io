

.. _sphx_glr_auto_examples_connectivity_plot_probabilistic_atlas_extraction.py:


Extracting signals of a probabilistic atlas of rest functional regions
========================================================================

This example extracts the signal on regions defined via a probabilistic
atlas, to construct a functional connectome.

We use the `MSDL atlas
<https://team.inria.fr/parietal/research/spatial_patterns/spatial-patterns-in-resting-state/>`_
of functional regions in rest.

The key to extract signals is to use the
:class:`nilearn.input_data.NiftiMapsMasker` that can transform nifti
objects to time series using a probabilistic atlas.

As the MSDL atlas comes with (x, y, z) MNI coordinates for the different
regions, we can visualize the matrix as a graph of interaction in a
brain. To avoid having too dense a graph, we represent only the 20% edges
with the highest values.


Retrieve the atlas and the data


.. code-block:: python

    from nilearn import datasets
    atlas = datasets.fetch_msdl_atlas()
    atlas_filename = atlas['maps']

    # Load the labels
    import numpy as np
    csv_filename = atlas['labels']

    # The recfromcsv function can load a csv file
    labels = np.recfromcsv(csv_filename)
    names = labels['name']

    data = datasets.fetch_adhd(n_subjects=1)

    print('First subject resting-state nifti image (4D) is located at: %s' %
          data.func[0])




.. rst-class:: sphx-glr-horizontal



.. rst-class:: sphx-glr-script-out

 **Output**:


  ::

    First subject resting-state nifti image (4D) is located at: /storage/data/nilearn_data/adhd/data/0010042/0010042_rest_tshift_RPI_voreg_mni.nii.gz


Extract the time series


.. code-block:: python

    from nilearn.input_data import NiftiMapsMasker
    masker = NiftiMapsMasker(maps_img=atlas_filename, standardize=True,
                             memory='nilearn_cache', verbose=5)

    time_series = masker.fit_transform(data.func[0],
                                       confounds=data.confounds)




.. rst-class:: sphx-glr-horizontal



.. rst-class:: sphx-glr-script-out

 **Output**:


  ::

    [NiftiMapsMasker.fit_transform] loading regions from /storage/data/nilearn_data/msdl_atlas/MSDL_rois/msdl_rois.nii
    Resampling maps
    [Memory]    0.0s, 0.0min: Loading resample_img...
    ________________________________________resample_img cache loaded - 0.1s, 0.0min
    [Memory]    0.3s, 0.0min: Loading filter_and_extract...
    __________________________________filter_and_extract cache loaded - 0.0s, 0.0min


`time_series` is now a 2D matrix, of shape (number of time points x
number of regions)


.. code-block:: python

    print(time_series.shape)




.. rst-class:: sphx-glr-horizontal



.. rst-class:: sphx-glr-script-out

 **Output**:


  ::

    (176, 39)


Build and display a correlation matrix


.. code-block:: python

    correlation_matrix = np.corrcoef(time_series.T)

    # Display the correlation matrix
    from matplotlib import pyplot as plt
    plt.figure(figsize=(10, 10))
    # Mask out the major diagonal
    np.fill_diagonal(correlation_matrix, 0)
    plt.imshow(correlation_matrix, interpolation="nearest", cmap="RdBu_r",
               vmax=0.8, vmin=-0.8)
    plt.colorbar()
    # And display the labels
    x_ticks = plt.xticks(range(len(names)), names, rotation=90)
    y_ticks = plt.yticks(range(len(names)), names)




.. image:: /auto_examples/connectivity/images/sphx_glr_plot_probabilistic_atlas_extraction_001.png
    :align: center




And now display the corresponding graph


.. code-block:: python

    from nilearn import plotting
    coords = labels[['x', 'y', 'z']].tolist()

    # We threshold to keep only the 20% of edges with the highest value
    # because the graph is very dense
    plotting.plot_connectome(correlation_matrix, coords,
                             edge_threshold="80%")

    plotting.show()



.. image:: /auto_examples/connectivity/images/sphx_glr_plot_probabilistic_atlas_extraction_002.png
    :align: center




**Total running time of the script:**
(0 minutes 1.922 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_probabilistic_atlas_extraction.py <plot_probabilistic_atlas_extraction.py>`
