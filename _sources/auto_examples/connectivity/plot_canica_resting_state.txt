

.. _example_connectivity_plot_canica_resting_state.py:


Group analysis of resting-state fMRI with ICA: CanICA
=====================================================

An example applying CanICA to resting-state data. This example applies it
to 40 subjects of the ADHD200 datasets.

CanICA is an ICA method for group-level analysis of fMRI data. Compared
to other strategies, it brings a well-controlled group model, as well as a
thresholding algorithm controlling for specificity and sensitivity with
an explicit model of the signal. The reference papers are:

    * G. Varoquaux et al. "A group model for stable multi-subject ICA on
      fMRI datasets", NeuroImage Vol 51 (2010), p. 288-299

    * G. Varoquaux et al. "ICA-based sparse features recovery from fMRI
      datasets", IEEE ISBI 2010, p. 1177

Pre-prints for both papers are available on hal
(http://hal.archives-ouvertes.fr)



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: images/plot_canica_resting_state_001.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_002.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_003.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_004.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_005.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_006.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_007.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_008.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_009.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_010.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_011.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_012.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_013.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_014.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_015.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_016.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_017.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_018.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_019.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_020.png
            :scale: 47


**Script output**:

.. rst-class:: sphx-glr-script-out

  ::

    First functional nifti image (4D) is at: /home/varoquau/nilearn_data/adhd/data/3902469/3902469_rest_tshift_RPI_voreg_mni.nii.gz
    [MultiNiftiMasker.fit] Loading data from [/home/varoquau/nilearn_data/adhd/data/3902469/3902469_rest_tshift_RPI_voreg_mni.nii.gz, /home/varoquau/nilearn_data/adhd/data/7774305/7774305_rest_tshift_RPI_voreg_mni.nii.gz, /home/varoquau/nilearn_
    [MultiNiftiMasker.fit] Computing mask
    [Memory]    0.0s, 0.0min: Loading compute_multi_epi_mask...
    ______________________________compute_multi_epi_mask cache loaded - 0.0s, 0.0min
    [MultiNiftiMasker.transform] Resampling mask
    [Memory]    0.0s, 0.0min: Loading resample_img...
    ________________________________________resample_img cache loaded - 0.0s, 0.0min
    [Memory]   63.1s, 1.1min: Loading unmask...
    ______________________________________________unmask cache loaded - 0.1s, 0.0min


**Python source code:** :download:`plot_canica_resting_state.py <plot_canica_resting_state.py>`

.. literalinclude:: plot_canica_resting_state.py
    :lines: 22-

**Total running time of the example:**  67.51 seconds
( 1 minutes  7.51 seconds)
    