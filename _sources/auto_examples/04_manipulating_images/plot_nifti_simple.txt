

.. _sphx_glr_auto_examples_04_manipulating_images_plot_nifti_simple.py:


Simple example of NiftiMasker use
==================================

Here is a simple example of automatic mask computation using the nifti masker.
The mask is computed and visualized.

Retrieve the NYU test-retest dataset


.. code-block:: python


    from nilearn import datasets
    nyu_dataset = datasets.fetch_nyu_rest(n_subjects=1)
    func_filename = nyu_dataset.func[0]

    # print basic information on the dataset
    print('First anatomical nifti image (3D) is at: %s' % nyu_dataset.anat_anon[0])
    print('First functional nifti image (4D) is at: %s' % func_filename)





.. rst-class:: sphx-glr-script-out

 Out::

      First anatomical nifti image (3D) is at: /vaporific/aa013911/nisl_data/nyu_rest/session1/sub05676/anat/mprage_anonymized.nii.gz
    First functional nifti image (4D) is at: /vaporific/aa013911/nisl_data/nyu_rest/session1/sub05676/func/lfo.nii.gz


Compute the mask


.. code-block:: python

    from nilearn.input_data import NiftiMasker

    # As this is raw resting-state EPI, the background is noisy and we cannot
    # rely on the 'background' masking strategy. We need to use the 'epi' one
    nifti_masker = NiftiMasker(standardize=False, mask_strategy='epi',
                               memory="nilearn_cache", memory_level=2)
    nifti_masker.fit(func_filename)
    mask_img = nifti_masker.mask_img_







Visualize the mask


.. code-block:: python

    from nilearn.plotting import plot_roi
    from nilearn.image.image import mean_img

    # calculate mean image for the background
    mean_func_img = mean_img(func_filename)

    plot_roi(mask_img, mean_func_img, display_mode='y', cut_coords=4, title="Mask")





.. image:: /auto_examples/04_manipulating_images/images/sphx_glr_plot_nifti_simple_001.png
    :align: center




Preprocess data with the NiftiMasker


.. code-block:: python

    nifti_masker.fit(func_filename)
    fmri_masked = nifti_masker.transform(func_filename)
    # fmri_masked is now a 2D matrix, (n_voxels x n_time_points)







Run an algorithm


.. code-block:: python

    from sklearn.decomposition import FastICA
    n_components = 20
    ica = FastICA(n_components=n_components, random_state=42)
    components_masked = ica.fit_transform(fmri_masked.T).T







Reverse masking, and display the corresponding map


.. code-block:: python

    components = nifti_masker.inverse_transform(components_masked)

    # Visualize results
    from nilearn.plotting import plot_stat_map, show
    from nilearn.image import index_img

    plot_stat_map(index_img(components, 0), mean_func_img,
                  display_mode='y', cut_coords=4, title="Component 0")

    show()



.. image:: /auto_examples/04_manipulating_images/images/sphx_glr_plot_nifti_simple_002.png
    :align: center




**Total running time of the script:**
(0 minutes 11.250 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_nifti_simple.py <plot_nifti_simple.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_nifti_simple.ipynb <plot_nifti_simple.ipynb>`
