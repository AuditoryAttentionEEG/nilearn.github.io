

.. _example_nisl_plot_canica_resting_state.py:


Group analysis of resting-state fMRI with ICA: CanICA
=====================================================

An example applying CanICA to resting-state data. This example applies it
to 40 subjects of the ADHD200 datasets.

CanICA is an ICA method for group-level analysis of fMRI data. Compared
to other strategies, it brings a well-controlled group model, as well as a
thresholding algorithm controlling for specificity and sensitivity with
an explicit model of the signal. The reference papers are:

    * G. Varoquaux et al. "A group model for stable multi-subject ICA on
      fMRI datasets", NeuroImage Vol 51 (2010), p. 288-299

    * G. Varoquaux et al. "ICA-based sparse features recovery from fMRI
      datasets", IEEE ISBI 2010, p. 1177

Pre-prints for both papers are available on hal
(http://hal.archives-ouvertes.fr)



.. rst-class:: horizontal


    *

      .. image:: images/plot_canica_resting_state_1.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_2.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_3.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_4.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_5.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_6.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_7.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_8.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_9.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_10.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_11.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_12.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_13.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_14.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_15.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_16.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_17.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_18.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_19.png
            :scale: 47

    *

      .. image:: images/plot_canica_resting_state_20.png
            :scale: 47


**Script output**::

  [NiftiMultiMasker.fit] Loading data from [/volatile/fabian/nisl_data/adhd/ADHD200_40sub_preprocessed/data/0010042/0010042_rest_tshift_RPI_voreg_mni.nii.gz, /volatile/fabian/nisl_data/adhd/ADHD200_40sub_preprocessed/data/0010128/0010128_rest_
  [NiftiMultiMasker.fit] Computing mask
  [NiftiMultiMasker.transform] Resampling mask
  [NiftiMultiMasker.transform] Loading data from Nifti1Image('/volatile/fabian/nisl_data/adhd/ADHD200_40sub_preprocessed/data/0010042/0010042_rest_tshift_RPI_voreg_mni.nii.gz')
  [NiftiMultiMasker.transform] Loading data from Nifti1Image('/volatile/fabian/nisl_data/adhd/ADHD200_40sub_preprocessed/data/0010128/0010128_rest_tshift_RPI_voreg_mni.nii.gz')
  [NiftiMultiMasker.transform] Loading data from Nifti1Image('/volatile/fabian/nisl_data/adhd/ADHD200_40sub_preprocessed/data/0023008/0023008_rest_tshift_RPI_voreg_mni.nii.gz')
  [NiftiMultiMasker.transform] Loading data from Nifti1Image('/volatile/fabian/nisl_data/adhd/ADHD200_40sub_preprocessed/data/0027011/0027011_rest_tshift_RPI_voreg_mni.nii.gz')
  [NiftiMultiMasker.transform] Loading data from Nifti1Image('/volatile/fabian/nisl_data/adhd/ADHD200_40sub_preprocessed/data/0027034/0027034_rest_tshift_RPI_voreg_mni.nii.gz')
  ________________________________________________________________________________
  [Memory] Calling scipy.linalg.decomp_svd.svd...
  svd(array([[ 1.368015, ..., -1.954957],
         ..., 
         [ 0.895432, ..., -1.256974]], dtype=float32), full_matrices=False)
  ______________________________________________________________svd - 3.6s, 0.1min
  ________________________________________________________________________________
  [Memory] Calling scipy.linalg.decomp_svd.svd...
  svd(array([[ 1.8549  , ..., -1.535806],
         ..., 
         [ 1.146825, ..., -1.929326]], dtype=float32), full_matrices=False)
  ______________________________________________________________svd - 3.6s, 0.1min
  ________________________________________________________________________________
  [Memory] Calling scipy.linalg.decomp_svd.svd...
  svd(array([[-1.007073, ..., -0.08495 ],
         ..., 
         [ 0.983031, ...,  0.670781]], dtype=float32), full_matrices=False)
  ______________________________________________________________svd - 1.0s, 0.0min
  ________________________________________________________________________________
  [Memory] Calling scipy.linalg.decomp_svd.svd...
  svd(array([[-0.610392, ..., -1.113907],
         ..., 
         [ 0.245711, ..., -0.726931]], dtype=float32), full_matrices=False)
  ______________________________________________________________svd - 7.2s, 0.1min
  ________________________________________________________________________________
  [Memory] Calling scipy.linalg.decomp_svd.svd...
  svd(array([[-1.708709, ...,  0.255081],
         ..., 
         [-2.034011, ...,  0.745142]], dtype=float32), full_matrices=False)
  ______________________________________________________________svd - 7.1s, 0.1min
  ________________________________________________________________________________
  [Memory] Calling sklearn.utils.extmath.randomized_svd...
  randomized_svd(array([[ 0.004236, ...,  0.003407],
         ..., 
         [-0.000243, ...,  0.004391]], dtype=float32), 
  20)
  ___________________________________________________randomized_svd - 1.1s, 0.0min
  ________________________________________________________________________________
  [Memory] Calling sklearn.decomposition.fastica_.fastica...
  fastica(array([[-0.00125 , ..., -0.002089],
         ..., 
         [-0.003922, ...,  0.005858]]), fun='cube', random_state=<mtrand.RandomState object at 0x2046db0>, whiten=False)
  __________________________________________________________fastica - 0.3s, 0.0min



**Python source code:** :download:`plot_canica_resting_state.py <plot_canica_resting_state.py>`

.. literalinclude:: plot_canica_resting_state.py
    :lines: 22-

**Total running time of the example:**  479.13 seconds
    